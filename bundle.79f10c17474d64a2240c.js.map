{"version":3,"file":"bundle.79f10c17474d64a2240c.js","mappings":"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","sources":["webpack:///./src/script.js"],"sourcesContent":["import \"./style.css\";\n\nimport * as THREE from \"three\";\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer.js\";\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass.js\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass.js\";\nimport { FontLoader } from \"three/examples/jsm/loaders/FontLoader.js\";\nimport { TextGeometry } from \"three/examples/jsm/geometries/TextGeometry.js\";\nimport { RoundedBoxGeometry } from \"three/examples/jsm/geometries/RoundedBoxGeometry.js\";\nimport CANNON from \"cannon\";\n\nconst canvas = document.querySelector(\"canvas.webgl\");\n\nconst sizes = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\nconst cursor = {\n  x: 0,\n  y: 0,\n};\n\nconst adjustedCursor = new THREE.Vector2();\nconst mouseCoordinates = new THREE.Vector2();\nconst updateCursorPosition = (e) => {\n  console.log(e.clientX, e.clientY);\n  cursor.x = e.clientX / sizes.width - 0.5;\n  cursor.y = -(e.clientY / sizes.height - 0.5);\n  adjustedCursor.x = (e.clientX / sizes.width) * 2 - 1;\n  adjustedCursor.y = -(e.clientY / sizes.height) * 2 + 1;\n  mouseCoordinates.x = e.clientX;\n  mouseCoordinates.y = e.clientY;\n  console.log(cursor);\n};\n// document.addEventListener(\"mousemove\", updateCursorPosition);\ncanvas.addEventListener(\"pointerdown\", (e) => {\n  canvas.setPointerCapture(e.pointerId);\n  updateCursorPosition(e);\n\n  canvas.addEventListener(\"pointermove\", (e) => {\n    console.log(\"m\");\n    updateCursorPosition(e);\n  });\n  canvas.addEventListener(\"pointerup\", (e) => {\n    canvas.hasPointerCapture(e.pointerId);\n    canvas.removeEventListener(\"pointermove\", updateCursorPosition, {\n      once: true,\n    });\n  });\n});\n\nconst options = {\n  enableSwoopingCamera: false,\n  enableRotation: true,\n  transmission: 1,\n  thickness: 1.2,\n  roughness: 0.05,\n  envMapIntensity: 1.5,\n  clearcoat: 1,\n  clearcoatRoughness: 0.1,\n  normalScale: 1,\n  clearcoatNormalScale: 0.3,\n  normalRepeat: 1,\n  bloomThreshold: 0.85,\n  bloomStrength: 0.5,\n  bloomRadius: 0.33,\n};\n\nconst scene = new THREE.Scene();\n\nconst world = new CANNON.World();\nworld.broadphase = new CANNON.SAPBroadphase(world);\nworld.gravity.set(0, 0, 0);\n\nconst fog = new THREE.Fog(\"#A842FF\", 20, 40);\nscene.fog = fog;\n\nconst textureLoader = new THREE.TextureLoader();\nconst cubeTexureLoader = new THREE.CubeTextureLoader();\nconst matcapTexture = textureLoader.load(\"./textures/matcaps/10.jpeg\");\nconst matcapMaterial = new THREE.MeshMatcapMaterial({\n  matcap: matcapTexture,\n});\nconst fontLoader = new FontLoader();\n\nfontLoader.load(\"./fonts/Mabry Pro Black_Regular.json\", (font) => {\n  const textGeometry = new TextGeometry(\"small fps energy\", {\n    font: font,\n    size: 0.5,\n    height: 0.2,\n    curveSegments: 3,\n    // bevelEnabled: true,\n    // bevelThickness: 0.03,\n    // bevelSize: 0.02,\n    // bevelOffset: 0,\n    // bevelSegments: 2\n  });\n  textGeometry.center();\n  const text = new THREE.Mesh(textGeometry, matcapMaterial);\n  scene.add(text);\n});\n\n// const ambientLight = new THREE.AmbientLight('#ffffff', 3.3)\n// scene.add(ambientLight)\n\n// const hdrEquirect = new RGBELoader().load(\n//   \"./textures/environmentMaps/empty_warehouse_01_1k.hdr\",\n//   () => {\n//     hdrEquirect.mapping = THREE.EquirectangularReflectionMapping\n//   }\n// )\n\nconst environmentMap = cubeTexureLoader.load([\n  \"./textures/environmentMaps/cubeMap/px.jpg\",\n  \"./textures/environmentMaps/cubeMap/nx.jpg\",\n  \"./textures/environmentMaps/cubeMap/py.jpg\",\n  \"./textures/environmentMaps/cubeMap/ny.jpg\",\n  \"./textures/environmentMaps/cubeMap/pz.jpg\",\n  \"./textures/environmentMaps/cubeMap/nz.jpg\",\n]);\n\nscene.background = environmentMap;\n\nconst normalMapTexture = textureLoader.load(\n  \"./textures/environmentMaps/normal.jpeg\"\n);\nnormalMapTexture.wrapS = THREE.RepeatWrapping;\nnormalMapTexture.wrapT = THREE.RepeatWrapping;\nnormalMapTexture.repeat.set(options.normalRepeat, options.normalRepeat);\n\nconst MESH_COUNT = 48;\nconst targets = [];\nconst bodies = [];\n\nconst material = new THREE.MeshPhysicalMaterial({\n  transmission: options.transmission,\n  thickness: options.thickness,\n  roughness: options.roughness,\n  // envMap: hdrEquirect,\n  envMap: environmentMap,\n  envMapIntensity: options.envMapIntensity,\n  clearcoat: options.clearcoat,\n  clearcoatRoughness: options.clearcoatRoughness,\n  normalScale: new THREE.Vector2(options.normalScale),\n  normalMap: normalMapTexture,\n  clearcoatNormalMap: normalMapTexture,\n  clearcoatNormalScale: new THREE.Vector2(options.clearcoatNormalScale),\n});\n\nconst hoverMaterial = material.clone();\n\nconst plasticCannonMaterial = new CANNON.Material();\n\nconst plasticPlasticContactMaterial = new CANNON.ContactMaterial(\n  plasticCannonMaterial,\n  plasticCannonMaterial,\n  {\n    friction: 0.04,\n    restitution: 0.01,\n  }\n);\n\nworld.addContactMaterial(plasticPlasticContactMaterial);\n\nconst textCannon = new CANNON.Box(\n  new CANNON.Vec3(2.640500068664551, 0.3187499940395355, 0.10000000149011612)\n);\nconst textBody = new CANNON.Body({\n  mass: 0,\n  shape: textCannon,\n  material: plasticCannonMaterial,\n});\nworld.addBody(textBody);\n\n// const stickThree = new THREE.Mesh(new THREE.BoxGeometry(0.8, 0.8, 12), matcapMaterial)\n// scene.add(stickThree)\n\nconst stickCannon = new CANNON.Box(new CANNON.Vec3(0.4, 0.4, 6));\nconst stickBody = new CANNON.Body({\n  mass: 1,\n  shape: stickCannon,\n  material: plasticCannonMaterial,\n  force: new CANNON.Vec3(1, 1, 1),\n});\nworld.addBody(stickBody);\n\nconst geometry = new RoundedBoxGeometry(0.3, 0.3, 0.3, 2, 0.05);\nconst mesh = new THREE.Mesh(geometry, material);\n// const geometry = new THREE.TorusGeometry(0.5, 0.3, 32, 32)\n// const geometry = new THREE.BoxGeometry(0.3, 0.3, 0.3)\n// const mesh = new THREE.InstancedMesh(geometry, material, MESH_COUNT)\n\nconst cannonShape = new CANNON.Box(new CANNON.Vec3(0.15, 0.15, 0.15));\n\nfor (let i = 0; i < MESH_COUNT; i++) {\n  const currentMesh = mesh.clone();\n\n  const x = (Math.random() - 0.5) * 10;\n  const y = (Math.random() - 0.5) * 7;\n  const z = (Math.random() - 0.5) * 10;\n  currentMesh.position.set(x, y, z);\n\n  const currentCannonBody = new CANNON.Body({\n    mass: 200,\n    position: new CANNON.Vec3(x, y, z),\n    shape: cannonShape,\n    material: plasticCannonMaterial,\n    angularDamping: 0.8,\n    linearDamping: 0.31,\n    angularVelocity: new CANNON.Vec3(10, 10, 10),\n    force: new CANNON.Vec3(10, 10, 10),\n  });\n  const axis = new CANNON.Vec3(x, y, z);\n  currentCannonBody.quaternion.setFromAxisAngle(axis, x);\n\n  currentMesh.quaternion.copy(currentCannonBody.quaternion);\n\n  scene.add(currentMesh);\n  world.addBody(currentCannonBody);\n  targets.push(currentMesh);\n  bodies.push(currentCannonBody);\n}\n\nwindow.addEventListener(\"resize\", () => {\n  sizes.width = window.innerWidth;\n  sizes.height = window.innerHeight;\n\n  camera.aspect = sizes.width / sizes.height;\n  camera.updateProjectionMatrix();\n\n  renderer.setSize(sizes.width, sizes.height);\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\nconst camera = new THREE.PerspectiveCamera(\n  45,\n  sizes.width / sizes.height,\n  0.1,\n  30\n);\ncamera.position.z = 6;\ncamera.lookAt(0, 0, 0);\nscene.add(camera);\n\n// Controls\n// const controls = new OrbitControls(camera, canvas)\n// controls.enableDamping = true\n\nconst renderer = new THREE.WebGLRenderer({\n  antialias: true,\n  canvas: canvas,\n  powerPreference: \"high-performance\",\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.outputEncoding = THREE.sRGBEncoding;\nrenderer.physicallyCorrectLights = true;\n\nconst renderPass = new RenderPass(scene, camera);\nconst bloomPass = new UnrealBloomPass(\n  new THREE.Vector2(sizes.width, sizes.height),\n  options.bloomStrength,\n  options.bloomRadius,\n  options.bloomThreshold\n);\n\nconst composer = new EffectComposer(renderer);\ncomposer.addPass(renderPass);\ncomposer.addPass(bloomPass);\n\nconst clock = new THREE.Clock();\nlet oldElapsedTime = 0;\n\nconst raycaster = new THREE.Raycaster();\nlet currentIntersect;\nlet intersected = [];\n\nconst tick = () => {\n  const elapsedTime = clock.getElapsedTime();\n  const deltaTime = elapsedTime - oldElapsedTime;\n  oldElapsedTime = elapsedTime;\n\n  camera.rotation.x = Math.sin(elapsedTime / 10);\n  camera.rotation.x += Math.sin(elapsedTime) * 0.5 * 0.01;\n  camera.rotation.z = Math.sin(elapsedTime / 4) * cursor.x * 0.5;\n  stickBody.quaternion.copy(camera.quaternion);\n  // stickThree.quaternion.copy(camera.quaternion)\n\n  camera.position.x += (cursor.x * 15 - camera.position.x) * 0.01;\n  camera.position.y += (cursor.y * 15 - camera.position.y) * 0.01;\n  const screenPosition = new THREE.Vector3(cursor.x, cursor.y, 0);\n  screenPosition.unproject(camera);\n  stickBody.position.set(screenPosition.x / 2, screenPosition.y / 2, 0);\n  // stickThree.position.copy(stickBody.position)\n\n  camera.lookAt(0, 0, 0);\n\n  raycaster.setFromCamera(adjustedCursor, camera);\n\n  const intersects = raycaster.intersectObjects(targets);\n\n  for (const target of targets) {\n    hoverMaterial.roughness = Math.max(\n      0.05,\n      (hoverMaterial.roughness -= 0.001)\n    );\n    if (hoverMaterial.roughness === 0.05) {\n      target.material = material;\n    }\n  }\n  for (let intersect of intersects) {\n    currentIntersect = intersects[0];\n    currentIntersect.object.material = hoverMaterial;\n    currentIntersect.object.material.roughness = Math.min(\n      0.35,\n      (currentIntersect.object.material.roughness += 0.09)\n    );\n    intersected.push(currentIntersect);\n  }\n\n  world.step(1 / 60, deltaTime, 3);\n\n  for (let i = 0; i < targets.length; i++) {\n    const impulse = new CANNON.Vec3(\n      -bodies[i].position.x * deltaTime * (50 * (0.5 - Math.abs(cursor.x))),\n      -bodies[i].position.y * deltaTime * (50 * (0.5 - Math.abs(cursor.x))),\n      -bodies[i].position.z * deltaTime * (50 * (0.5 - Math.abs(cursor.x)))\n    );\n    bodies[i].applyImpulse(impulse, new CANNON.Vec3(0, 0, 0));\n    targets[i].position.copy(bodies[i].position);\n    targets[i].quaternion.copy(bodies[i].quaternion);\n  }\n\n  // Update controls\n  // controls.update()\n\n  composer.render();\n  // renderer.render(scene, camera)\n\n  window.requestAnimationFrame(tick);\n};\ntick();\n"],"names":["canvas","document","querySelector","sizes","width","window","innerWidth","height","innerHeight","cursor","x","y","adjustedCursor","THREE","mouseCoordinates","updateCursorPosition","e","console","log","clientX","clientY","addEventListener","setPointerCapture","pointerId","hasPointerCapture","removeEventListener","once","scene","world","CANNON","broadphase","gravity","set","fog","textureLoader","cubeTexureLoader","matcapTexture","load","matcapMaterial","matcap","FontLoader","font","textGeometry","TextGeometry","size","curveSegments","center","text","add","environmentMap","background","normalMapTexture","wrapS","wrapT","repeat","targets","bodies","material","transmission","thickness","roughness","envMap","envMapIntensity","clearcoat","clearcoatRoughness","normalScale","normalMap","clearcoatNormalMap","clearcoatNormalScale","hoverMaterial","clone","plasticCannonMaterial","plasticPlasticContactMaterial","friction","restitution","addContactMaterial","textCannon","textBody","mass","shape","addBody","stickCannon","stickBody","force","geometry","RoundedBoxGeometry","mesh","cannonShape","i","currentMesh","Math","random","z","position","currentCannonBody","angularDamping","linearDamping","angularVelocity","axis","quaternion","setFromAxisAngle","copy","push","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","min","devicePixelRatio","lookAt","antialias","powerPreference","outputEncoding","physicallyCorrectLights","renderPass","RenderPass","bloomPass","UnrealBloomPass","composer","EffectComposer","addPass","clock","oldElapsedTime","raycaster","currentIntersect","intersected","tick","elapsedTime","getElapsedTime","deltaTime","rotation","sin","screenPosition","unproject","setFromCamera","intersects","intersectObjects","target","max","intersect","object","step","length","impulse","abs","applyImpulse","render","requestAnimationFrame"],"sourceRoot":""}